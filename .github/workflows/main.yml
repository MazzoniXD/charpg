name: Continuous Deploy
on:
  push:
    branches:
      - 'main'
env:
  DOCKER_TAG: ${{ github.sha }}
  DOCKER_TOKEN: ${{secrets.DOCKERHUB_TOKEN}}
  DOCKER_USER: ${{secrets.DOCKERHUB_USERNAME}}

jobs:
  ci:
    name: Build and Test Application
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Login to Docker Hub
      uses: docker/login-action@v1
      with:
        username: ${{env.DOCKER_USER}}
        password: ${{env.DOCKER_TOKEN}}

    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1

    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        tags: ${{env.DOCKER_USER}}/charpg:${{ env.DOCKER_TAG }}
        push: true

  provision:
    name: Provision Infrastructure
    runs-on: ubuntu-latest
    needs: [ ci ]
    outputs:
      publicid: ${{ steps.vars.outputs.publicip }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: 'MazzoniXD/AWS-EC2'

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.7
          terraform_wrapper: false
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Terraform Init
        id: init
        run: terraform init
      
      - name: Terraform Apply
        run: terraform apply -auto-approve
      
      - name: Set Host Output
        id: vars
        run: |
          OUTPUT=$(terraform output -no-color -raw public_ip)
          echo "::set-output name=publicip::${OUTPUT}"

      - run: echo ${{ steps.vars.outputs.publicip }}

  cd:    
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: [ provision ]
    steps:
      - name: Create compose on server
        uses: appleboy/ssh-action@master
        with:
          host: '${{ needs.provision.outputs.publicid }}'
          key: ${{ secrets.SSH_KEY }}
          username: "ubuntu"
          envs: DOCKER_TAG, DOCKER_USER
          script: |
            mkdir -p ~/charpg
            cat << EOF > ~/charpg/docker-compose.yml
            version: '3.9'
            services:
              charpg:
                image: ${DOCKER_USER}/charpg:${DOCKER_TAG}
                container_name: charpg
                hostname: charpg
                ports:
                  - '8080:8080'
              db:
                image: postgres
                container_name: charpgdb
                hostname: charpgdb
                environment:
                  - POSTGRES_DB=charpgdb
                  - POSTGRES_USERNAME=postgres
                  - POSTGRES_PASSWORD=postgres
                volumes:
                  - .:/var/lib/postgres/data

            EOF

      - name: Create compose on server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          key: ${{ secrets.SSH_KEY }}
          username: "ubuntu"
          script: |
            docker-compose -f ~/charpg/docker-compose.yml up -d --force-recreate --remove-orphans
